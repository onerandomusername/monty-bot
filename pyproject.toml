[tool.poetry]
name = "monty"
version = "1.0.0"
description = "Helpful bot for python, github, and discord things."
authors = ["aru <genericusername414@gmail.com>"]
license = "MIT"

[tool.poetry.dependencies]
python = "~=3.9"
aiodns = "~=3.0"
aiohttp = { version = "~=3.8.3", extras = ['speedups'] }
arrow = "~=1.2.3"
attrs = "^22.1.0"
base65536 = "^0.1.1"
beautifulsoup4 = "^4.10.0"
cachingutils = { git = "https://github.com/onerandomusername/cachingutils.git", rev='vcokltfre/feat/v2' }
colorama = { version = "~=0.4.5", markers = "sys_platform == 'win32'" }
coloredlogs = "~=15.0"
disnake = { git = "https://github.com/onerandomusername/disnake.git", rev='master' }
fakeredis = { url = "https://github.com/dsoftwareinc/fakeredis-py/archive/3b22120dc7718eb63418a48bdcf07532f4e3cbdc.zip", optional = true }
gql = "^3.4.0"
lxml = "^4.9.1"
markdownify = "==0.11.2"
mistune = "^2.0.4"
redis = { version = "^4.3.1", extras = ['hiredis'] }
Pillow = "^9.2.0"
psutil = "^5.9.4"
rapidfuzz = "^2.13.2"
statsd = "^3.3.0"
tomli = "^2.0.1"
# database dependencies
alembic = "^1.8.1"
asyncpg = "^0.27.0"
databases = "^0.6.1"
ormar = { version = "^0.12.0", extras = ["orjson"] }
psycopg2-binary = "^2.9.5"
pydantic = "^1.10.2"
SQLAlchemy = "^1.4.41"
ormar-postgres-extensions = "^2.3.0"
sentry-sdk = "^1.11.1"

[tool.poetry.extras]
fakeredis = ['fakeredis']

[tool.poetry.dev-dependencies]
black = "^22.8"
coverage = "~=6.5"
ruff = "^0.0.177"
isort = "^5.10.1"
pre-commit = "~=2.20.0"
taskipy = "~=1.10.3"
python-dotenv = "~=0.21.0"
pytest = "~=7.2.0"
pytest-cov = "~=4.0.0"
pytest-xdist = { version = "~=3.0.2", extras = ["psutil"] }
pyright = "^1.1.278"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 120
target-version = ['py38']
include = '\.pyi?$'

[tool.isort]
profile = "black"
atomic = true
ensure_newline_before_comments = true
force_grid_wrap = 0
include_trailing_comma = true
line_length = 120
lines_after_imports = 2
multi_line_output = 3
use_parentheses = true
known_first_party = ["monty"]

[tool.ruff.isort]
known-first-party = ["monty"]

[tool.ruff]
line-length = 120
target-version = "py38"
select = [
    "E", # pycodestyle
    "F", # pyflakes
    "W", # pycodestyle
    "S", # bandit
    "I", # isort
    # "RUF", # ruff specific exceptions
    "ANN", # flake8-annotations
    "B", # flake8-bugbear
    "C", # flake8-comprehensions
    "D", # flake-docstrings
    "Q", # flake8-quotes
    "T201", "T203" # flake8-print
]
ignore = [
    # Missing Docstrings
    "D100","D101","D104","D105","D106","D107",
    # Docstring Whitespace
    "D203","D212","D214","D215",
    # Docstring Content
    "D400","D402","D404","D405","D406","D407","D408","D409","D410","D411","D412","D413","D414","D416","D417",
    # Type Annotations
    "ANN002","ANN003","ANN101","ANN102","ANN204","ANN206","ANN401",

    # temporarily disabled
    "S101", # Use of `assert` detected
    "C901", # mccabe
]

[tool.ruff.per-file-ignores]
"monty/alembic/*" = ["D"]
"_global_source_snekcode.py" = ["T201"]

[tool.ruff.mccabe]
max-complexity = 20

[tool.taskipy.tasks]
export = 'poetry export --without-hashes -o requirements.txt'
start = "python -m monty"
lint = "pre-commit run --all-files"
precommit = "pre-commit install"
pyright = { cmd = "dotenv -f task.env run -- pyright", help = "Run pyright" }
test-nocov = "pytest -n auto"
test = "pytest -n auto --cov-report= --cov"
html = "coverage html"
report = "coverage report"

[tool.coverage.run]
branch = true
source_pkgs = ["bot"]
source = ["tests"]


[tool.pyright]
typeCheckingMode = "basic"
include = [
    "monty",
    "*.py",
]

strictParameterNoneValue = false
